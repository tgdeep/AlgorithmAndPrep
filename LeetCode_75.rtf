{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red255\green255\blue255;\red0\green0\blue0;
\red32\green108\blue135;\red101\green76\blue29;\red0\green0\blue109;\red19\green118\blue70;\red157\green0\blue210;
\red15\green112\blue1;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c14902\c49804\c60000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;\cssrgb\c68627\c0\c85882;
\cssrgb\c0\c50196\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww23120\viewh15680\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
1. Delete middle node of a linked list\
\
\
\pard\pardeftab720\partightenfactor0

\f1\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
class\cf0  \cf5 Solution\cf0  \{\cb1 \
\cb3     \cf2 func\cf0  \cf6 deleteMiddle\cf0 (\cf6 _\cf0  \cf7 head\cf0 : ListNode?) -> ListNode? \{\cb1 \
\cb3         \cf2 let\cf0  dummy = \cf6 ListNode\cf0 (\cf8 0\cf0 , head)\cb1 \
\
\cb3         \cf2 var\cf0  slow: ListNode? = dummy\cb1 \
\cb3         \cf2 var\cf0  fast = slow?.\cf7 next\cf0 \cb1 \
\
\cb3         \cf9 while\cf0  \cf2 let\cf0  next = fast?.\cf7 next\cf0  \{\cb1 \
\cb3             slow = slow?.\cf7 next\cf0 \cb1 \
\cb3             fast = next.\cf7 next\cf0 \cb1 \
\cb3         \}\cb1 \
\
\cb3         slow?.\cf7 next\cf0  = slow?.\cf7 next\cf0 ?.\cf7 next\cf0 \cb1 \
\cb3         \cf9 return\cf0  dummy.\cf7 next\cf0 \cb1 \
\cb3     \cb1 \
\cb3     \}\cb1 \
\cb3 \}\cb1 \
\
\
\
2. Odd Even Linked List\
\
\
\cf2 \cb3 class\cf0  \cf5 Solution\cf0  \{\cb1 \
\cb3     \cf2 func\cf0  \cf6 oddEvenList\cf0 (\cf6 _\cf0  \cf7 head\cf0 : ListNode?) -> ListNode? \{\cb1 \
\cb3         \cf2 let\cf0  oddHead = head ,  evenHead = head?.\cf7 next\cf0 \cb1 \
\
\cb3         \cf2 var\cf0  oddTail = oddHead , evenTail = evenHead\cb1 \
\
\cb3         \cf2 var\cf0  current = evenHead?.\cf7 next\cf0 , even = \cf2 false\cf0 \cb1 \
\cb3         \cf9 while\cf0  current != \cf2 nil\cf0  \{\cb1 \
\cb3            \cb1 \
\cb3             \cf9 if\cf0  even\{\cb1 \
\cb3                 evenTail!.\cf7 next\cf0  = current\cb1 \
\cb3                 evenTail = current\cb1 \
\cb3             \}\cb1 \
\
\cb3             \cf9 else\cf0 \{\cb1 \
\cb3                oddTail!.\cf7 next\cf0  = current\cb1 \
\cb3                oddTail = current\cb1 \
\
\cb3             \}\cb1 \
\
\cb3             current = current!.\cf7 next\cf0 \cb1 \
\cb3             even.\cf6 toggle\cf0 ()\cb1 \
\
\cb3         \}\cb1 \
\
\cb3         \cf10 // connect the odd and Even\cf0 \cb1 \
\cb3         oddTail?.\cf7 next\cf0  = evenHead\cb1 \
\cb3         evenTail?.\cf7 next\cf0  = \cf2 nil\cf0 \cb1 \
\
\
\cb3         \cf9 return\cf0  oddHead\cb1 \
\
\
\cb3     \}\cb1 \
\cb3 \}\
\
\
\
3. \cb1 \
}